type Product {
  """
  Brand of the product
  """
  brand: String
  """
  Id of the brand of the product
  """
  brandId: Int
  """
  linkText is used as cacheId
  """
  cacheId: ID
  categoryId: ID
  """
  Categories of the product
  """
  categories: [String]
    @deprecated(
      reason: "Use 'categoryTree' field for internationalization support"
    )
  """
  Product's categories
  """
  categoryTree: [Category]
  """
  List of related products
  """
  clusterHighlights: [ClusterHighlight]
  productClusters: [ProductClusters]
  """
  Product description
  """
  description: String
  """
  SKU objects of the product
  """
  items: [SKU]
  """
  List of SKU Specifications
  """
  skuSpecifications: [SkuSpecification]
  """
  Product URL
  """
  link: String
  """
  Product slug
  """
  linkText: String
  """
  Product ID
  """
  productId: ID
  """
  Product name
  """
  productName: String
  """
  Array of product properties
  """
  properties: [Property]
  """
  Array of product properties
  """
  propertyGroups: [PropertyGroup]
  """
  Product reference
  """
  productReference: String
  """
  Title used by html tag
  """
  titleTag: String
  """
  Description used by html tag
  """
  metaTagDescription: String
  """
  Related Products
  """
  recommendations: Recommendation
  """
  JSON specification of the product
  """
  jsonSpecifications: String
  """
  List of benefits associated with this product
  """
  benefits: [Benefit]
  itemMetadata: ItemMetadata
  """
  Array of product SpecificationGroup
  """
  specificationGroups: [SpecificationGroup]

  """
  Returns highest and lowest prices for available SKUs in product.
  """
  priceRange: ProductPriceRange

  """
  Product Release Date, for list ordering and product cluster highlight
  """
  releaseDate: String

  """
  Product properties that will be selected by default. e.g: {key: "Color", value: "Blue"}
  """
  selectedProperties: [SelectedProperty]
  """
  Merchandising rule applied to the product
  """
  rule: Rule
}

type SelectedProperty {
  key: String
  value: String
}

type ProductPriceRange {
  sellingPrice: PriceRange
  listPrice: PriceRange
}

type PriceRange {
  highPrice: Float
  lowPrice: Float
}

type OnlyProduct {
  brand: String
  categoryId: ID
  categoryTree: [Category]
  clusterHighlights: [ClusterHighlight]
  productClusters: [ProductClusters]
  description: String
  link: String
  linkText: String
  productId: ID
  productName: String
  properties: [Property]
  propertyGroups: [PropertyGroup]
  productReference: String
  recommendations: Recommendation
  jsonSpecifications: String
}

type ProductClusters {
  id: ID
  name: String
}

type ClusterHighlight {
  id: ID
  name: String
}

type Seller {
  sellerId: ID
  sellerName: String
  addToCartLink: String
  sellerDefault: Boolean
  commertialOffer: Offer
}

type Recommendation {
  buy: [Product]
  view: [Product]
  similars: [Product]
}

type SKU {
  itemId: ID
  name: String
  nameComplete: String
  complementName: String
  ean: String
  referenceId: [Reference]
  measurementUnit: String
  unitMultiplier: Float
  kitItems: [KitItem]
  images: [Image]
  videos: [Video]
  sellers: [Seller]
  variations: [Property]
  attachments: [Attachment] @deprecated(reason: "Use itemMetaData instead")
  estimatedDateArrival: String
}

type SkuSpecification {
  field: SKUSpecificationField
  values: [SKUSpecificationValue]
}

type SKUSpecificationField {
  originalName: String
  name: String
}

type SKUSpecificationValue {
  originalName: String
  name: String
}

type productSpecification {
  fieldName: String
  fieldValues: [String]
}

type KitItem {
  itemId: ID
  amount: Int
  product: OnlyProduct
  sku: SKU
}

type Attachment {
  id: ID
  name: String
  required: Boolean
  domainValues: [DomainValues]
}

type DomainValues {
  FieldName: String
  MaxCaracters: String
  DomainValues: String
}

type Offer {
  Installments: [Installment]
  Price: Float
  ListPrice: Float
  spotPrice: Float
  PriceWithoutDiscount: Float
  RewardValue: Float
  PriceValidUntil: String
  AvailableQuantity: Float
  Tax: Float
  taxPercentage: Float
  CacheVersionUsedToCallCheckout: String
  DeliverySlaSamples: [DeliverySlaSamples]
  """
  List of discount highlights
  """
  discountHighlights: [Discount!]
  teasers: [Teaser!]
  """
  List of SKUs for gifts associated with the product
  """
  giftSkuIds: [String]
  """
  List of gifts associated with the product
  """
  gifts: [Gift]
}

type Gift {
  productName: String
  skuName: String
  brand: String
  linkText: String
  description: String
  images: [GiftImage]
}

type GiftImage {
  imageUrl: String
  imageLabel: String
  imageText: String
}

type Teaser {
  name: String
  conditions: TeaserCondition
  effects: TeaserEffects
}

type TeaserCondition {
  minimumQuantity: Int
  parameters: [TeaserValue]
}

type TeaserEffects {
  parameters: [TeaserValue]
}

type TeaserValue {
  name: String
  value: String
}

"""
Discount object
"""
type Discount {
  """
  Discount name
  """
  name: String
}

type DeliverySlaSamples {
  DeliverySlaPerTypes: [DeliverySlaPerTypes]
  Region: Region
}

type DeliverySlaPerTypes {
  TypeName: String
  Price: Float
  EstimatedTimeSpanToDelivery: String
}

type Region {
  IsPersisted: Boolean
  IsRemoved: Boolean
  Id: ID
  Name: String
  CountryCode: String
  ZipCode: String
  CultureInfoName: String
}

type Image {
  cacheId: ID
  imageId: ID
  imageLabel: String
  imageTag: String
  imageUrl: String
  imageText: String
}

type Video {
  videoUrl: String
}

type SpecificationGroup {
  originalName: String
  name: String
  specifications: [SpecificationGroupProperty]
}

type SpecificationGroupProperty {
  originalName: String
  name: String
  values: [String]
}

type Property {
  originalName: String
  name: String
  values: [String]
}

type PropertyGroup {
  name: String
  properties: [String]
}

type Installment {
  Value: Float
  InterestRate: Float
  TotalValuePlusInterestRate: Float
  NumberOfInstallments: Int
  PaymentSystemName: String
  PaymentSystemGroupName: String
  Name: String
}

type Reference {
  Key: String
  Value: String
}

type Rule {
  id: String
}

"""
Object that indicates if the term was misspelled and suggests a possible correction.
"""
type SearchCorrection {
  """
  The corrected term. If the API was not able to correct the term, it will show the original search term.
  """
  text: String
  """
  The same as `text`, but it highlights the corrected word. Useful when there is more than one word.
  """
  highlighted: String
  """
  Whether the term was misspelled (`true`) or not (`false`).
  """
  misspelled: Boolean
  """
  Whether the API was able to suggest a correction (`true`) or not (`false`).
  """
  correction: Boolean
}

type Category {
  """
  id is used as cacheId
  """
  cacheId: ID
  """
  URI of category
  """
  href: String
  """
  Category text link
  """
  slug: String
  """
  Category ID
  """
  id: Int
  """
  Category name
  """
  name: String
  """
  Title used by html tag
  """
  titleTag: String
  """
  Description used by html tag
  """
  hasChildren: Boolean
  """
  Has children categories
  """
  metaTagDescription: String
  """
  Categories children
  """
  children: [Category]
}

"""
Benefit of a Product
"""
type Benefit {
  """
  Flag which indicates if the benefit is featured or not
  """
  featured: Boolean
  """
  Id of the product which the benefit is associated
  """
  id: String
  """
  Name of the benefit
  """
  name: String
  """
  Items of the benefit
  """
  items: [BenefitItem]
  """
  Type of benefit
  """
  teaserType: String
}

type BenefitItem {
  """
  Product itself
  """
  benefitProduct: Product
  """
  IDs of the SKU Items that are taking part in the benefit
  """
  benefitSKUIds: [String]
  """
  Discount applied to the benefit product
  """
  discount: Float
  """
  Minimum quantity of the benefit product that is required to validate the benefit
  """
  minQuantity: Int
}

type ItemMetadata {
  items: [ItemMetadataUnit]
  priceTable: [ItemPriceTable]
}

type ItemPriceTable {
  type: String
  values: [PriceTableItem]
}

type PriceTableItem {
  id: String
  assemblyId: String
  price: Int
}

type ItemMetadataUnit {
  id: ID
  name: String
  skuName: String
  productId: String
  refId: String
  ean: String
  imageUrl: String
  detailUrl: String
  seller: String
  assemblyOptions: [AssemblyOption]
}

type AssemblyOption {
  id: ID
  name: String
  required: Boolean
  composition: CompositionType
  inputValues: [InputValue]
}

scalar StringOrBoolean

type InputValue {
  label: String
  maxLength: Int
  type: InputValueType
  defaultValue: StringOrBoolean
  domain: [String]
}

enum InputValueType {
  TEXT
  BOOLEAN
  OPTIONS
}

type CompositionType {
  minQuantity: Int
  maxQuantity: Int
  items: [CompositionItem]
}

type CompositionItem {
  id: ID
  minQuantity: Int
  maxQuantity: Int
  initialQuantity: Int
  priceTable: String
  seller: String
}

type ProductSearch {
  """
  List of products.
  """
  products: [Product]
  """
  Total number of products.
  """
  recordsFiltered: Int
  """
  Object that indicates if the term was misspelled and suggests a possible correction.
  """
  correction: SearchCorrection
  """
  Indicates how the search-engine dealt with the fullText when there is more than one word.\n * `and` - It means that the products contains all the words in the query.\n * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.
  """
  operator: Operator
  """
  Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself.
  """
  fuzzy: String
  redirect: String
  translated: Boolean
}
