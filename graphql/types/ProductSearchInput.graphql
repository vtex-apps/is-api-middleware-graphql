input ProductInput {
  """
  Brand of the product
  """
  brand: String
  """
  Id of the brand of the product
  """
  brandId: Int
  """
  linkText is used as cacheId
  """
  cacheId: ID
  categoryId: ID
  """
  Categories of the product
  """
  categories: [String]
    @deprecated(
      reason: "Use 'categoryTree' field for internationalization support"
    )
  """
  Product's categories
  """
  categoryTree: [CategoryInput]
  """
  List of related products
  """
  clusterHighlights: [ClusterHighlightInput]
  productClusters: [ProductClustersInput]
  """
  Product description
  """
  description: String
  """
  SKU objects of the product
  """
  items: [SKUInput]
  """
  List of SKU Specifications
  """
  skuSpecifications: [SkuSpecificationInput]
  """
  Product URL
  """
  link: String
  """
  Product slug
  """
  linkText: String
  """
  Product ID
  """
  productId: ID
  """
  Product name
  """
  productName: String
  """
  Array of product properties
  """
  properties: [PropertyInput]
  """
  Array of product properties
  """
  propertyGroups: [PropertyGroupInput]
  """
  Product reference
  """
  productReference: String
  """
  Title used by html tag
  """
  titleTag: String
  """
  Description used by html tag
  """
  metaTagDescription: String
  """
  Related Products
  """
  recommendations: RecommendationInput
  """
  JSON specification of the product
  """
  jsonSpecifications: String
  """
  List of benefits associated with this product
  """
  benefits: [BenefitInput]
  itemMetadata: ItemMetadataInput
  """
  Array of product SpecificationGroup
  """
  specificationGroups: [SpecificationGroupInput]

  """
  Returns highest and lowest prices for available SKUs in product.
  """
  priceRange: ProductPriceRangeInput

  """
  Product Release Date, for list ordering and product cluster highlight
  """
  releaseDate: String

  """
  Product properties that will be selected by default. e.g: {key: "Color", value: "Blue"}
  """
  selectedProperties: [SelectedPropertyInput]
  """
  Merchandising rule applied to the product
  """
  rule: RuleInput
}

input SelectedPropertyInput {
  key: String
  value: String
}

input ProductPriceRangeInput {
  sellingPrice: PriceRangeInput
  listPrice: PriceRangeInput
}

input PriceRangeInput {
  highPrice: Float
  lowPrice: Float
}

input OnlyProductInput {
  brand: String
  categoryId: ID
  categoryTree: [CategoryInput]
  clusterHighlights: [ClusterHighlightInput]
  productClusters: [ProductClustersInput]
  description: String
  link: String
  linkText: String
  productId: ID
  productName: String
  properties: [PropertyInput]
  propertyGroups: [PropertyGroupInput]
  productReference: String
  recommendations: RecommendationInput
  jsonSpecifications: String
}

input ProductClustersInput {
  id: ID
  name: String
}

input ClusterHighlightInput {
  id: ID
  name: String
}

input SellerInput {
  sellerId: ID
  sellerName: String
  addToCartLink: String
  sellerDefault: Boolean
  commertialOffer: OfferInput
}

input RecommendationInput {
  buy: [ProductInput]
  view: [ProductInput]
  similars: [ProductInput]
}

input SKUInput {
  itemId: ID
  name: String
  nameComplete: String
  complementName: String
  ean: String
  referenceId: [ReferenceInput]
  measurementUnit: String
  unitMultiplier: Float
  kitItems: [KitItemInput]
  images: [ImageInput]
  videos: [VideoInput]
  sellers: [SellerInput]
  variations: [PropertyInput]
  attachments: [AttachmentInput] @deprecated(reason: "Use itemMetaData instead")
  estimatedDateArrival: String
  Color: [String]
  Size: [String]
}

input SkuSpecificationInput {
  field: SKUSpecificationFieldInput
  values: [SKUSpecificationValueInput]
}

input SKUSpecificationFieldInput {
  originalName: String
  name: String
}

input SKUSpecificationValueInput {
  originalName: String
  name: String
}

input productSpecificationInput {
  fieldName: String
  fieldValues: [String]
}

input KitItemInput {
  itemId: ID
  amount: Int
  product: OnlyProductInput
  sku: SKUInput
}

input AttachmentInput {
  id: ID
  name: String
  required: Boolean
  domainValues: [DomainValuesInput]
}

input DomainValuesInput {
  FieldName: String
  MaxCaracters: String
  DomainValues: String
}

input OfferInput {
  Installments: [InstallmentInput]
  Price: Float
  ListPrice: Float
  spotPrice: Float
  PriceWithoutDiscount: Float
  RewardValue: Float
  PriceValidUntil: String
  AvailableQuantity: Float
  Tax: Float
  taxPercentage: Float
  CacheVersionUsedToCallCheckout: String
  DeliverySlaSamples: [DeliverySlaSamplesInput]
  """
  List of discount highlights
  """
  discountHighlights: [DiscountInput!]
  teasers: [TeaserInput!]
  """
  List of SKUs for gifts associated with the product
  """
  GiftSkuIds: [String]
  """
  List of gifts associated with the product
  """
  gifts: [GiftInput]
}

input GiftInput {
  productName: String
  skuName: String
  brand: String
  linkText: String
  description: String
  images: [GiftImageInput]
}

input GiftImageInput {
  imageUrl: String
  imageLabel: String
  imageText: String
}

input TeaserInput {
  name: String
  conditions: TeaserConditionInput
  effects: TeaserEffectsInput
}

input TeaserConditionInput {
  minimumQuantity: Int
  parameters: [TeaserValueInput]
}

input TeaserEffectsInput {
  parameters: [TeaserValueInput]
}

input TeaserValueInput {
  name: String
  value: String
}

"""
Discount object
"""
input DiscountInput {
  """
  Discount name
  """
  name: String
}

input DeliverySlaSamplesInput {
  DeliverySlaPerinputsInput: [DeliverySlaPerinputsInput]
  Region: RegionInput
}

input DeliverySlaPerinputsInput {
  inputNameInput: String
  Price: Float
  EstimatedTimeSpanToDelivery: String
}

input RegionInput {
  IsPersisted: Boolean
  IsRemoved: Boolean
  Id: ID
  Name: String
  CountryCode: String
  ZipCode: String
  CultureInfoName: String
}

input ImageInput {
  cacheId: ID
  imageId: ID
  imageLabel: String
  imageTag: String
  imageUrl: String
  imageText: String
}

input VideoInput {
  videoUrl: String
}

input SpecificationGroupInput {
  originalName: String
  name: String
  specifications: [SpecificationGroupPropertyInput]
}

input SpecificationGroupPropertyInput {
  originalName: String
  name: String
  values: [String]
}

input PropertyInput {
  originalName: String
  name: String
  values: [String]
}

input PropertyGroupInput {
  name: String
  properties: [String]
}

input InstallmentInput {
  Value: Float
  InterestRate: Float
  TotalValuePlusInterestRate: Float
  NumberOfInstallments: Int
  PaymentSystemName: String
  PaymentSystemGroupName: String
  Name: String
}

input ReferenceInput {
  Key: String
  Value: String
}

input RuleInput {
  id: String
}

"""
Object that indicates if the term was misspelled and suggests a possible correction.
"""
input SearchCorrectionInput {
  """
  The corrected term. If the API was not able to correct the term, it will show the original search term.
  """
  text: String
  """
  The same as `text`, but it highlights the corrected word. Useful when there is more than one word.
  """
  highlighted: String
  """
  Whether the term was misspelled (`true`) or not (`false`).
  """
  misspelled: Boolean
  """
  Whether the API was able to suggest a correction (`true`) or not (`false`).
  """
  correction: Boolean
}

input CategoryInput {
  """
  id is used as cacheId
  """
  cacheId: ID
  """
  URI of category
  """
  href: String
  """
  Category text link
  """
  slug: String
  """
  Category ID
  """
  id: Int
  """
  Category name
  """
  name: String
  """
  Title used by html tag
  """
  titleTag: String
  """
  Description used by html tag
  """
  hasChildren: Boolean
  """
  Has children categories
  """
  metaTagDescription: String
  """
  Categories children
  """
  children: [CategoryInput]
}

"""
Benefit of a Product
"""
input BenefitInput {
  """
  Flag which indicates if the benefit is featured or not
  """
  featured: Boolean
  """
  Id of the product which the benefit is associated
  """
  id: String
  """
  Name of the benefit
  """
  name: String
  """
  Items of the benefit
  """
  items: [BenefitItemInput]
  """
  Type of benefit
  """
  teaserType: String
}

input BenefitItemInput {
  """
  Product itself
  """
  benefitProduct: ProductInput
  """
  IDs of the SKU Items that are taking part in the benefit
  """
  benefitSKUIds: [String]
  """
  Discount applied to the benefit product
  """
  discount: Float
  """
  Minimum quantity of the benefit product that is required to validate the benefit
  """
  minQuantity: Int
}

input ItemMetadataInput {
  items: [ItemMetadataUnitInput]
  priceTable: [ItemPriceTableInput]
}

input ItemPriceTableInput {
  type: String
  values: [PriceTableItemInput]
}

input PriceTableItemInput {
  id: String
  assemblyId: String
  price: Int
}

input ItemMetadataUnitInput {
  id: ID
  name: String
  skuName: String
  productId: String
  refId: String
  ean: String
  imageUrl: String
  detailUrl: String
  seller: String
  assemblyOptions: [AssemblyOptionInput]
}

input AssemblyOptionInput {
  id: ID
  name: String
  required: Boolean
  composition: CompositionTypeInput
  inputValues: [InputValueInput]
}

input InputValueInput {
  label: String
  maxLength: Int
  type: InputValueType
  defaultValue: StringOrBoolean
  domain: [String]
}

input CompositionTypeInput {
  minQuantity: Int
  maxQuantity: Int
  items: [CompositionItemInput]
}

input CompositionItemInput {
  id: ID
  minQuantity: Int
  maxQuantity: Int
  initialQuantity: Int
  priceTable: String
  seller: String
}

input AssemblyOptionInputInput {
  id: ID!
  quantity: Int!
  assemblyId: String!
  seller: String!
  options: [AssemblyOptionInput!]
}

input ProductSearchInput {
  """
  List of products.
  """
  products: [ProductInput]
  """
  Total number of products.
  """
  recordsFiltered: Int
  """
  Object that indicates if the term was misspelled and suggests a possible correction.
  """
  correction: SearchCorrectionInput
  """
  Indicates how the search-engine dealt with the fullText when there is more than one word.\n * `and` - It means that the products contains all the words in the query.\n * `or` - It means that the results will contain at least one word from the original search query. If `and` was not possible, `or` will be the fallback.
  """
  operator: Operator
  """
  Indicates how the search engine corrected the misspelled word by using fuzzy logic. It can be a number representing the max number of misspelled letters, or the string `auto` suggesting that the search-engine should set this value by itself.
  """
  fuzzy: String
  redirect: String
  translated: Boolean
}

input AfterInput {
  searchResult: ProductSearchInput
  params: SearchParamsInput
}
